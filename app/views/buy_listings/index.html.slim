section.mb-12.bg-gray-100.py-4.px-2.rounded.border-gray-300.border
  .flex.justify-between
    h2.text-2xl.text-orange-700.font-bold.mb-4 Mi Lista de Compra
    = link_to 'Ingresar en modo texto', buy_listings_collection_path, class: 'text-orange-500'

  .flex.justify-end
    = link_to "Agregar carta", new_buy_listing_path, class: 'block text-center w-32 bg-green-600 text-white font-bold border-b-4 px-2 py-2 border-green-900 hover:bg-green-500', remote: true

  table.sortable-theme-light.w-full.js-datatable-cards.compact.stripe.hover.row-border
    thead
      th
      th Carta
      th Precio TCG
      th.w-16 %OFF
      th Acciones
    tbody
      - @buy_listings.each do |listing|
        = render partial: 'components/listing_line_item', locals: {listing: listing, delete_path: buy_listing_path(listing.id), edit_path: edit_buy_listing_path(listing.id)}

.modal.fade id="edit-modal" tabindex="-1" role="dialog" aria-hidden="true"
  .modal-dialog role="document"
    .modal-content
      .flex.border-b.border-gray-300.p-4
        h5.text-lg.font-bold.flex-1 Editar item de búsqueda
        button.close type="button" data-dismiss="modal" aria-label="Close"
          span aria-hidden="true" &times;
      .modal-body

.modal.fade id="new-modal" tabindex="-1" role="dialog" aria-hidden="true"
  .modal-dialog role="document"
    .modal-content
      .flex.border-b.border-gray-300.p-4
        h5.text-lg.font-bold.flex-1 Nuevo item de búsqueda
        button.close type="button" data-dismiss="modal" aria-label="Close"
          span aria-hidden="true" &times;
      .modal-body


|
  <script>
    $(document).ready( function () {
      var table = $('.js-datatable-cards').DataTable( {
        autoWidth: false,
        order: [[ 2, "desc" ]],
        language: {
          "sProcessing":     "Procesando...",
          "sLengthMenu":     "Mostrar _MENU_ cartas",
          "sZeroRecords":    "No se encontraron cartas para los filtros elegidos",
          "sEmptyTable":     "Ningún dato disponible en esta tabla",
          "sInfo":           "Mostrando cartas _START_ a _END_ de un total de _TOTAL_ cartas",
          "sInfoEmpty":      "No hay cartas",
          "sInfoFiltered":   "(filtrado de un total de _MAX_ cartas)",
          "sInfoPostFix":    "",
          "sSearch":         "",
          "sUrl":            "",
          "sInfoThousands":  ",",
          "sLoadingRecords": "Cargando...",
          "oPaginate": {
            "sFirst":    "Primero",
            "sLast":     "Último",
            "sNext":     "Siguiente",
            "sPrevious": "Anterior"
          },
          "oAria": {
            "sSortAscending":  ": Activar para ordenar la columna de manera ascendente",
            "sSortDescending": ": Activar para ordenar la columna de manera descendente"
          }
        },
        columnDefs: [
          { "targets": [ 0 ], "sortable": false, "searchable": false },
          { "targets": [ 1 ], "sortable": true, "searchable": true },
          { "targets": [ 2 ], "sortable": true, "searchable": false },
          { "targets": [ 3 ], "sortable": true, "searchable": false },
          { "targets": [ 4 ], "sortable": false, "searchable": false },
          { "targets": [ 5 ], "visible": false },
          { "targets": [ 6 ], "visible": false }
        ],
        "lengthChange": false
      });
      new autoComplete({
        data: {
          src: async () => {
            const query = document.querySelector("#DataTables_Table_0_filter input").value;
            const source = await fetch(`https://api.scryfall.com/cards/autocomplete?q=${query}`);
            const response = await source.json();
            return response.data;
          },
          cache: false
        },
        selector: "#DataTables_Table_0_filter input",   // Input field selector              | (Optional)
        threshold: 2,                        // Min. Chars length to start Engine | (Optional)
        debounce: 100,                       // Post duration for engine to start | (Optional)
        resultsList: {                       // Rendered results list object      | (Optional)
            render: true,
            container: (source) => {
              source.classList.add('absolute', 'border-b', 'w-full', 'bg-white', 'rounded-b', 'border-l', 'border-r');
            },
            destination: document.querySelector("#DataTables_Table_0_filter input"),
            element: "ul"
        },
        maxResults: 5,                         // Max. number of rendered results | (Optional)
        highlight: true,                       // Highlight matching results      | (Optional)
        resultItem: {                          // Rendered result item            | (Optional)
          content: (data, source) => {
            source.innerHTML = data.match;
            source.classList.add('p-2', 'border-t', 'hover:bg-gray-200', 'text-left');
          },
          element: "li"
        },
        onSelection: feedback => {             // Action script onSelection event | (Optional)
          document.querySelector('#DataTables_Table_0_filter input').value = feedback.selection.value;
          table.search(feedback.selection.value).draw();
        }
      });
    });
  </script>